
// Generated from javelin-layout file
// Global
// Steno
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Tab  |  S1  |   T  |   P  |   H  |  *1  |        |  *2  |   F  |   P  |   L  |   T  |    D   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Ctrl/Esc|  S2  |   K  |   W  |   R  |  *3  |        |  *4  |   R  |   B  |   G  |   S  |    Z   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// | Alpha  |      |      |      |      |      |        |      |      |      |      |      |        |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           | Cmd  |   A  |   O  |  |   E  |   U  |  #2  |
//                           `--------------------'  `--------------------'
//
// * Tapping Alpha key will switch to Alphabetic mode -- QWERTY, Dvorak, Colemak, Workman
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when
//   releasing it. This will also give access to the Symbols, Navigation and Function layers by
//   pressing those keys on the Alphabetic layer.
// * Command and Control activate a temporary qwerty layer

//
// QWERTY
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Tab  |   Q  |   W  |   E  |   R  |   T  |        |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Ctrl/Esc|   A  |   S  |   D  |   F  |   G  |        |   H  |   J  |   K  |   L  | ;  : |  '  "  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Shf/Sten|   Z  |   X  |   C  |   V  |   B  |        |   N  |   M  | ,  < | .  > | /  ? | RShift |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           | Meta |  Alt |Nav/Sp|  | Space| Sym  |Fn/Ent|
//                           `--------------------'  `--------------------'
//
// For keys marked with two options, holding or pressing with other keys will cause the first option
// to be used, tapping briefly will trigger the second.
//
// Press left & right shift together to enable word caps.
// Press left & right shift with alt to toggle on and off caps lock.

//
// Symbols
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |    `   |  1   |  2   |  3   |  4   |  5   |        |   6  |  7   |  8   |  9   |  0   |   =    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |    ~   |  !   |  @   |  #   |  $   |  %   |        |   ^  |  &   |  *   |  (   |  )   |   +    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |    ?   |  \   |  |   |  -   |  [   |  {   |        |   }  |  ]   |  _   |  .   |  /   |  Magic |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           | Meta |  Alt |Ctl/Sp|  |      |      |      |
//                           `--------------------'  `--------------------'
//
// * Magic has a few different meanings:
//   - By itself, it does nothing.
//   - Following '-' or '=', it means '>'
//   - Following '(' or '\', it means '"'
//   - Following a '{' or '[', it means enter (newline)
//   - Following a digit, it means ','
//   - Following a comma or dot, it means space ' '

//
// Function
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |  F9  | F10  | F11  | F12  |      |        |      |      |      |      |      |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F5  |  F6  |  F7  |  F8  |      |        |      | Shift| Ctrl |  Alt |  GUI |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F1  |  F2  |  F3  |  F4  |      |        |      |      |      |      |      |        |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           |      |      |      |  |      |      |      |
//                           `--------------------'  `--------------------'

//
// Navigation/Media
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |      |      |      |      | Bri+ |        | Vol+ | BkSp |   ↑  | Del  | PgUp |  Home  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift| Bri- |        | Vol- |  ←   |   ↓  |   →  | PgDn |   End  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        | Mute |      |      |      |      |        |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           |      |Numpad|      |  | Space|      | Enter|
//                           `--------------------'  `--------------------'
//

//
// Numpad -- Pressing Alt + Nav at the same time
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |      |      |      |      |      |        |      |   7  |   8  |   9  |   *  |  Bksp  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift|      |        |      |   4  |   5  |   6  |   -  |   +    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        |      |   1  |   2  |   3  |   /  | Magic  |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           |      |      |      |  | Space|   0  |   .  |
//                           `--------------------'  `--------------------'
//
// * Magic has the same meaning as the symbol layer.

//
// Settings - pressing both Sym and Fn together.
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |  USB L | BLE1 | BLE2 | BLE3 | BLE4 | USB R|        |      |      |Brght+| Sat+ |      |Disconn |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |Embedd|Gemini|TxBolt|PloHID|      |        |      |      |Brght-| Sat- |      |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        | WPM  | Tape |Strkes|      |      |        |      |      |      |      |      | Unpair |
// `----------------------+--+---+--+---+--+---+--.  ,--+---+--+---+--+---+-------------------------'
//                           |      |      |      |  |      |      |      |
//                           `--------------------'  `--------------------'
//
// To pair a device to slot 1, hold BLE1 for 2 seconds. Same for BLE2-BLE4.

// This script file is generated by Javelin's GUI Configuration Tool.

// Javelin constants
const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;
const SC_KP_COMMA = 0x85;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

// From Consumer Page (0x0c)
const SC_CONSUMER_PLAY = 0xa0;                // UsageId 0xb0
const SC_CONSUMER_PAUSE = 0xa1;               // UsageId 0xb1
const SC_CONSUMER_RECORD = 0xa2;              // UsageId 0xb2
const SC_CONSUMER_FAST_FORWARD = 0xa3;        // UsageId 0xb3
const SC_CONSUMER_REWIND = 0xa4;              // UsageId 0xb4
const SC_CONSUMER_SCAN_NEXT_TRACK = 0xa5;     // UsageId 0xb5
const SC_CONSUMER_SCAN_PREVIOUS_TRACK = 0xa6; // UsageId 0xb6
const SC_CONSUMER_STOP = 0xa7;                // UsageId 0xb7
const SC_CONSUMER_EJECT = 0xa8;               // UsageId 0xb8

const SC_CONSUMER_STOP_EJECT = 0xbc;          // UsageId 0xcc
const SC_CONSUMER_PLAY_PAUSE = 0xbd;          // UsageId 0xcd
const SC_CONSUMER_PLAY_SKIP = 0xbe;           // UsageId 0xce

const SC_CONSUMER_MUTE = 0xd2;                // UsageId 0xe2
const SC_CONSUMER_VOLUME_UP = 0xd9;           // UsageId 0xe9
const SC_CONSUMER_VOLUME_DOWN = 0xda;         // UsageId 0xea

const SC_CONSUMER_BRIGHTNESS_UP = 0xde;       // UsageId 0x6f
const SC_CONSUMER_BRIGHTNESS_DOWN = 0xdf;     // UsageId 0x70

const LED_STATUS_NUM_LOCK = 0;
const LED_STATUS_CAPS_LOCK = 1;
const LED_STATUS_SCROLL_LOCK = 2;
const LED_STATUS_COMPOSE = 3;
const LED_STATUS_KANA = 4;

const AUTO_DRAW_NONE = 0;
const AUTO_DRAW_PAPER_TAPE = 1;
const AUTO_DRAW_STENO_LAYOUT = 2;
const AUTO_DRAW_WPM = 3;
const AUTO_DRAW_STROKES = 4;

const TEXT_ALIGNMENT_LEFT = 0;
const TEXT_ALIGNMENT_MIDDLE = 1;
const TEXT_ALIGNMENT_RIGHT = 2;

const FONT_ID_NORMAL = 0;
const FONT_ID_LARGE = 1;
const FONT_ID_DOS = 2;
const FONT_ID_SMALL_DIGITS = 3;
const FONT_ID_MEDIUM_DIGITS = 4;
const FONT_ID_LARGE_DIGITS = 5;
const FONT_ID_HUGE_DIGITS = 6;

const CONNECTION_NONE = 0;
const CONNECTION_BLE = 1;
const CONNECTION_USB = 2;
const CONNECTION_USB2 = 3;

const PAIR_CONNECTION_NONE = 0;
const PAIR_CONNECTION_BLE = 1;
const PAIR_CONNECTION_CABLE = 2;

const SCRIPT_ID_DISPLAY_OVERLAY = 0;
const SCRIPT_ID_BATTERY_UPDATE = 1;
const SCRIPT_ID_CONNECTION_UPDATE = 2;
const SCRIPT_ID_PAIR_CONNECTION_UPDATE = 3;
const SCRIPT_ID_KEYBOARD_LED_STATUS_UPDATE = 4;
const SCRIPT_ID_BLE_ADVERTISING_UPDATE = 5;
const SCRIPT_ID_BLE_SCANNING_UPDATE = 6;
const SCRIPT_ID_U2F_STATUS_UPDATE = 7;
const SCRIPT_ID_STENO_MODE_UPDATE = 9;
const SCRIPT_ID_BLE_PAIR_COMPLETE = 10;

// Layout constants

const DISPLAY_WIDTH = JAVELIN_DISPLAY_WIDTH ?? 32;
const DISPLAY_HEIGHT = JAVELIN_DISPLAY_HEIGHT ?? 128;
const HAS_AUDIO = JAVELIN_HAS_AUDIO ?? 0;

func noop() {}

var speed = 1;
var hueSpread = 4;
var hueShift = 0;
var brightness = 4;
var saturation = 5;

var keyColorData[42];

const TIMER_ID_RGB_UPDATE = 0;
const TIMER_ID_SCREEN_SAVER = 1;
const TIMER_ID_PAIRING_HOLD = 2;
const TIMER_ID_CAPS_RELEASE = 3;

const DYNAMIC_STENO_DISPLAY_WPM = 0;
const DYNAMIC_STENO_DISPLAY_PAPER_TAPE = 1;
const DYNAMIC_STENO_DISPLAY_STROKES = 2;

const MODIFIER_SHIFT = 2;

var lastButtonIndex;
var wordCaps;
var isBleSummaryActive;
var dynamicStenoDisplay;
var lastScanCodePressed;
var wasSteno12;
var wasSteno24;
var global24PressCount;
var wasSteno36;

const KEY_SHIFT = 0x100;

// Defined globally since drawBleSummary() also needs it.
const SETTINGS_IMAGE = [[
  20 20 00 00 00 00 00 c0 03 00 00 e0 07 00 00 e0
  07 00 c0 e0 07 03 e0 f3 cf 07 f0 ff ff 0f f0 ff
  ff 0f e0 ff ff 07 e0 ff ff 07 c0 ff ff 03 c0 7f
  fe 03 e0 1f f8 07 fc 0f f0 3f fe 0f f0 7f fe 07
  e0 7f fe 07 e0 7f fe 0f f0 7f fc 0f f0 3f e0 1f
  f8 07 c0 7f fe 03 c0 ff ff 03 e0 ff ff 07 e0 ff
  ff 07 f0 ff ff 0f f0 ff ff 0f e0 f3 cf 07 c0 e0
  07 03 00 e0 07 00 00 e0 07 00 00 c0 03 00 00 00
  00 00
]];

var layer;
func setLayer(layerIndex, layerId) {
  releaseAll();
  layer = layerIndex;
  sendEvent(formatString("layer_id: %d", layerId));
}

func dispatchToLayer(functions) {
  var f = functions[<resolveLayerIndex()>];
  f();
}

func resolveLayerIndex() var {
  return 0;
}

func activate0() {
}

func activateDynamic() {
  activate0();
}
func activateGlobal() {
  if (00) {
    pressAll();
  }
  setEnableButtonStates(00);
  updateDisplay();
  updateBoardPower();
}
func deactivate0() {
}

func deactivateDynamic() {}
func deactivateGlobal() {
}
// Global Script: Button Overrides
func isModifierKey(key) var {
  return SC_L_CTRL <= key && key <= SC_R_META;
}

func isWordCapsKey(key) var {
  return SC_A <= key && key <= SC_Z;
}

func isWordCapsContinuingKey(key, modifiers) var {
  if (key == SC_BACKSPACE) return 1;
  if (SC_1 <= key && key <= SC_0) return 1;
  if (key == SC_MINUS && (modifiers & 0x22)) {
    return 1;
  }
  key = key | 4;
  return key == SC_R_SHIFT || key == SC_R_ALT;
}

var wordPressActivatedShift = 0;
var lastPressScanCode = 0;
var lastPressModifiers = 0;

func pressScanCodeButton(buttonIndex, modifiers, scanCode, isModifier) {
  if (isInPressAll()) {
    if(isModifier) return;
    if(!isModifierKey(scanCode) || (wasSteno24 && buttonIndex == 24)) {
      return;
    }
  }

  // When rapidly pressing a pair of keys, where the first includes shift,
  // and the second one doesn't, the second can easily end up with the shift
  // version unintentionally. This is especially evident with symbols, so
  // release it here if the last key has shift, but the new key doesn't.
  if (isScanCodePressed(lastPressScanCode) && !isModifierKey(scanCode)) {
    if ((lastPressModifiers & MODIFIER_SHIFT) && (modifiers & MODIFIER_SHIFT) == 0) {
      // Makes it possible to tap "+=" quickly.
      releaseScanCode(lastPressScanCode);
      releaseScanCode(SC_L_SHIFT);
    }
  }

  var displayNeedsUpdate = 0;
  if (wordCaps) {
    if (isWordCapsKey(scanCode)) {
      if (!isScanCodePressed(SC_L_SHIFT)) {
        pressScanCode(SC_L_SHIFT);
        wordPressActivatedShift = 1;
      }
    } else if(!isWordCapsContinuingKey(scanCode, modifiers)) {
      wordCaps = 0;
      displayNeedsUpdate = 1;
    }
  }

  pressScanCode(scanCode);

  if (!isModifier) {
    lastPressScanCode = scanCode;
    lastPressModifiers = modifiers;
    lastScanCodePressed = scanCode | ((modifiers & MODIFIER_SHIFT) ? KEY_SHIFT : 0);
  }

  if (displayNeedsUpdate || isModifierKey(scanCode)) {
    updateDisplay();
  }
}

func releaseScanCodeButton(scanCode) {
  releaseScanCode(scanCode);

  if (wordCaps) {
    if (wordPressActivatedShift && isWordCapsKey(scanCode)) {
      releaseScanCode(SC_L_SHIFT);
      wordPressActivatedShift = 0;
    }
  }

  if (isModifierKey(scanCode)) {
    updateDisplay();
  }
}

func pressStenoKeyButton(scanCode) {
  if (isInPressAll()) return;
  pressStenoKey(scanCode);
}

func globalPress(buttonIndex) {
  lastButtonIndex = buttonIndex;
  updateScreenSaverTimer();
  @noop();
}

func globalRelease() {
  updateScreenSaverTimer();
}

// Global Script: Display Scripts
func updateDisplay() {
  @drawDisplayDynamicSteno();
}

func blankDisplay() {
  clearDisplay(0);
  clearDisplay(1);
  setAutoDraw(0, AUTO_DRAW_NONE);
  setAutoDraw(1, AUTO_DRAW_NONE);
}

func drawPaperTape() {
  setAutoDraw(0, AUTO_DRAW_PAPER_TAPE);
  setAutoDraw(1, AUTO_DRAW_PAPER_TAPE);
}

func drawStrokes() {
  setAutoDraw(0, AUTO_DRAW_STROKES);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplay0(layerImage) {
  const ICON_POSITIONS = [[
    08 00 00 00 00 00 00 00
    00 00 10 00 00 00 00 00
    00 00 10 00 08 12 00 00
    00 00 10 00 00 12 10 12
  ]];

  const SHIFT_IMAGE = [[
    10 10
    00 01 80 01 c0 01 e0 01 f0 7f f8 7f fc 7f fe 7f
    fe 7f fc 7f f8 7f f0 7f e0 01 c0 01 80 01 00 01
  ]];

  const CONTROL_IMAGE = [[
    10 10
    00 00 00 00 40 00 60 00 30 00 18 00 0c 00 06 00
    06 00 0c 00 18 00 30 00 60 00 40 00 00 00 00 00
  ]];

  const ALT_IMAGE = [[
    10 10
    00 00 00 30 00 30 00 30 00 30 00 38 00 1e 80 07
    e0 01 78 30 1c 30 0c 30 0c 30 0c 30 0c 30 00 00
  ]];

  const COMMAND_IMAGE = [[
    10 10
    00 00 3c 3c 7e 7e 66 66 66 66 fe 7f fc 3f 60 06
    60 06 fc 3f fe 7f 66 66 66 66 7e 7e 3c 3c 00 00
  ]];

  const CAPS_LOCK_IMAGE = [[
    10 10
    00 01 80 01 c0 01 e0 01 f0 67 f8 67 fc 67 fe 67
    fe 67 fc 67 f8 67 f0 67 e0 01 c0 01 80 01 00 01
  ]];

  setAutoDraw(0, AUTO_DRAW_NONE);
  isBleSummaryActive = 0;

  clearDisplay(0);
  drawImage(0, (DISPLAY_WIDTH - layerImage[0]) >> 1, DISPLAY_HEIGHT/2 - 48, layerImage);

  var iconCount = (isScanCodePressed(SC_L_SHIFT) || isScanCodePressed(SC_R_SHIFT))
      + (isScanCodePressed(SC_L_CTRL) || isScanCodePressed(SC_R_CTRL))
      + (isScanCodePressed(SC_L_ALT) || isScanCodePressed(SC_R_ALT))
      + (isScanCodePressed(SC_L_META) || isScanCodePressed(SC_R_META));
  var positions = ICON_POSITIONS + 8 * (iconCount - 1);
  var xOffset = DISPLAY_WIDTH/2 - 16;
  var yOffset = DISPLAY_HEIGHT/2;

  if (isScanCodePressed(SC_L_SHIFT) || isScanCodePressed(SC_R_SHIFT)) {
    drawImage(0, xOffset+positions[0], yOffset+positions[1], SHIFT_IMAGE);
    positions = positions + 2;
  }
  if (isScanCodePressed(SC_L_CTRL) || isScanCodePressed(SC_R_CTRL)) {
    drawImage(0, xOffset+positions[0], yOffset+positions[1], CONTROL_IMAGE);
    positions = positions + 2;
  }
  if (isScanCodePressed(SC_L_ALT) || isScanCodePressed(SC_R_ALT)) {
    drawImage(0, xOffset+positions[0], yOffset+positions[1], ALT_IMAGE);
    positions = positions + 2;
  }
  if (isScanCodePressed(SC_L_META) || isScanCodePressed(SC_R_META)) {
    drawImage(0, xOffset+positions[0], yOffset+positions[1], COMMAND_IMAGE);
  }

  if (getLedStatus(LED_STATUS_CAPS_LOCK)) {
    drawImage(0, DISPLAY_WIDTH/2 - 8, DISPLAY_HEIGHT/2 + 48, CAPS_LOCK_IMAGE);
  } else if (wordCaps) {
    drawImage(0, DISPLAY_WIDTH/2 - 8, DISPLAY_HEIGHT/2 + 48, SHIFT_IMAGE);
  }
}

func drawDisplaySteno() {
  const STENO_IMAGE = [[
    20 20 ff ff 3f 00 ff ff ff 00 ff ff ff 03 ff ff
    ff 07 ff ff ff 0f ff ff ff 1f ff f9 f3 3f ff f0
    e1 3f ff f0 e1 7f ff e1 f0 7f ff e3 f8 ff ff 47
    fc ff ff 07 fc ff ff 0f fe ff 0f 00 00 fe 0f 00
    00 fe 0f 00 00 fe ff 0f fe ff ff 07 fc ff ff 47
    fc ff ff e3 f8 ff ff e1 f0 7f ff f0 e1 7f ff f0
    e1 3f ff f9 f3 3f ff ff ff 1f ff ff ff 0f ff ff
    ff 07 ff ff ff 03 ff ff ff 00 ff ff 3f 00 00 00
    00 00
  ]];

  drawDisplay0(STENO_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);

  var mode = getParameter("steno_mode");
  var text;
  if (mode == "gemini")  {
    text = "Gemini";
  } else if(mode == "tx_bolt") {
    text = "TX Bolt";
  } else if(mode == "passport") {
    text = "Passport";
  } else if(mode == "procat") {
    text = "ProCAT";
  } else if(mode == "plover_hid") {
    text = "Plover HID";
  } else {
    return;
  }
  drawText(0, DISPLAY_WIDTH/2, DISPLAY_HEIGHT - 48 + 10, FONT_ID_NORMAL, TEXT_ALIGNMENT_MIDDLE, text);
}

func drawDisplayAbc() {
  const ABC_IMAGE = [[
    20 20 00 00 00 00 00 00 08 00 00 00 0c 00 00 00
    0f 00 00 c0 0f 00 00 f0 09 00 00 bc 00 00 80 8f
    00 00 80 bf 00 00 00 fc 08 00 00 f0 0f 00 00 c0
    0f 00 00 00 0e 00 00 00 08 00 80 00 08 00 80 ff
    0f 00 80 ff 0f 00 00 30 0c 00 00 10 08 00 00 30
    0c 00 00 f0 0f 00 00 e0 07 00 00 00 00 00 00 e0
    07 00 00 f0 0f 00 00 30 0c 00 00 10 08 00 00 30
    0c 00 00 70 0e 00 00 60 06 00 00 00 00 00 00 00
    00 00
  ]];

  drawDisplay0(ABC_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplayFunction() {
  const FUNCTION_IMAGE = [[
    20 20
    f0 ff ff 0f f8 ff ff 1f 0c 00 00 30 06 00 00 60
    03 00 00 c0 03 00 06 c0 03 00 06 c0 03 c0 ff c7
    03 e0 ff c7 03 60 06 c0 03 60 06 c0 03 00 00 c0
    03 00 fe c7 03 00 fe c7 03 00 0c c0 03 00 06 c0
    03 00 0e c0 03 00 fc c7 03 00 f8 c7 03 00 00 c0
    03 00 00 c0 03 00 00 c0 03 00 00 c0 03 00 00 c0
    03 00 00 c0 03 00 00 c0 03 00 00 c0 03 00 00 c0
    06 00 00 60 0c 00 00 30 f8 ff ff 1f f0 ff ff 0f
  ]];

  drawDisplay0(FUNCTION_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplaySymbol() {
  const SYMBOL_IMAGE = [[
    20 20 00 00 00 00 00 00 00 00 18 00 00 00 18 00
    00 00 1c 00 00 00 fe 3f ff 1b fe 3f ff 1b fe 3f
    ff 1b 00 00 00 00 00 00 fc 0f 00 00 fe 1f 1c 38
    ff 3f 1e 3c 07 38 1e 3e f3 33 06 3f f3 37 86 37
    f3 37 c6 33 07 36 fe 31 ff 3b fe 30 fe 3b 3c 30
    fc 19 00 00 00 00 1c 0c 00 03 1e 1c 18 3f 1e 3c
    f8 3f c6 38 ff 3f c6 30 ff 03 e6 30 1f 3f fe 39
    f8 3f fe 3f ff 3f bc 1f ff 03 00 0e 1f 03 00 00
    18 00
  ]];

  drawDisplay0(SYMBOL_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplayNavigation() {
  const NAVIGATION_IMAGE = [[
    20 20 00 00 00 00 00 80 01 00 00 c0 03 00 00 e0
    07 00 00 f0 0f 00 00 f8 1f 00 00 fc 3f 00 00 e0
    07 00 00 e0 07 00 00 e0 07 00 40 e0 07 02 60 e0
    07 06 70 00 00 0e f8 0f f0 1f fc 0f f0 3f fe 0f
    f0 7f fe 0f f0 7f fc 0f f0 3f f8 0f f0 1f 70 00
    00 0e 60 e0 07 06 40 e0 07 02 00 e0 07 00 00 e0
    07 00 00 e0 07 00 00 fc 3f 00 00 f8 1f 00 00 f0
    0f 00 00 e0 07 00 00 c0 03 00 00 80 01 00 00 00
    00 00
  ]];

  drawDisplay0(NAVIGATION_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplaySettings() {
  drawDisplay0(SETTINGS_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplayNumpad() {
  const NUMPAD_IMAGE = [[
    20 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00 00 00 00 00 00 00 00 7e 7e 7e 7e 7e 7e
    7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e
    7e 7e 00 00 00 7e 00 00 00 7e 7e 7e 7e 7e 7e 7e
    7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e
    7e 7e 00 00 00 00 00 00 00 00 7e 7e 7e 7e 7e 7e
    7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e
    7e 7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00
  ]];

  drawDisplay0(NUMPAD_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplaySecurityKey() {
  const SECURITY_KEY_IMAGE = [[
    20 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00 00 00 00 00 00 00 00 c0 ff ff 00 e0 ff
    ff 01 60 00 80 03 70 00 00 07 30 00 00 06 38 00
    00 0c 18 00 18 1c 18 00 7e 18 0c 00 66 38 0c ff
    c3 30 0c ff c3 30 0c 1b 66 38 18 1b 7e 18 18 01
    18 1c 38 00 00 0c 30 00 00 06 70 00 00 07 60 00
    80 03 e0 ff ff 01 c0 ff ff 00 00 00 00 00 00 00
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00
  ]];

  drawDisplay0(SECURITY_KEY_IMAGE);
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func drawDisplayDynamicSteno() {
  if (dynamicStenoDisplay == 0) {
    drawDisplaySteno();
  } else if (dynamicStenoDisplay == 1) {
    drawPaperTape();
  } else if (dynamicStenoDisplay == 2) {
    drawStrokes();
  }
}

// Global Script: DrawOverlay Scripts
func drawDisplayOverlay() {
  const OVERLAY_HEIGHT = 16;

  const PAIR_CONNECTED_STATUS_IMAGE_OFFSETS = [[ 00 02 1c ]];
  const PAIR_CONNECTED_STATUS_IMAGES = [[
    // None
    00 00

    // BLE
    0c 0c 00 00 98 00 98 01 98 03 98 07 98 01 98 01
    9e 01 9c 01 98 01 90 01 00 00

    // Cable
    0c 0c 00 00 60 00 f0 00 f8 01 fc 03 f0 00 f0 00
    fc 03 f8 01 f0 00 60 00 00 00
  ]];

  const USB_STATUS_IMAGE = [[
    09 0c 30 00 78 00 b0 00 06 0d ff 0f 86 0c 58 00
    3c 00 18 00
  ]];

  const BLUETOOTH_STATUS_IMAGE = [[
    06 0c 08 01 90 00 ff 0f 62 04 94 02 08 01
  ]];

  const BATTERY_LEVEL_STATUS_IMAGES = [[
    // battery0
    0c 0c f8 01 08 01 08 01 08 01 08 01 08 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery1
    0c 0c f8 01 f8 01 08 01 08 01 08 01 08 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery2
    0c 0c f8 01 f8 01 f8 01 08 01 08 01 08 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery3
    0c 0c f8 01 f8 01 f8 01 f8 01 08 01 08 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery4
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 08 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery5
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 08 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery6
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
    08 01 08 01 08 01 f8 01 f0 00

    // battery7
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
    f8 01 08 01 08 01 f8 01 f0 00

    // battery8
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
    f8 01 f8 01 08 01 f8 01 f0 00

    // battery9
    0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
    f8 01 f8 01 f8 01 f8 01 f0 00
  ]];

  const CHARGING_STATUS_IMAGE = [[
    0c 0c f8 01 08 01 08 01 68 01 70 04 78 03 ec 01
    e2 00 68 01 08 01 f8 01 f0 00
  ]];

  const BLE_PROFILE_DOTS = [[
    02 10 c0 00 c0 00
    02 10 b0 01 b0 01
    02 10 d8 06 d8 06
    02 10 b6 0d b6 0d
    02 10 db 36 db 36
  ]];

  // Clear the region.
  setDrawColor(0, 0);
  drawRect(0, 0, 0, DISPLAY_WIDTH, OVERLAY_HEIGHT);
  setDrawColor(0, 1);

  drawImage(
      0,
      2, 2,
      PAIR_CONNECTED_STATUS_IMAGES
      + PAIR_CONNECTED_STATUS_IMAGE_OFFSETS[getActivePairConnection()]
  );

  var x = 15;
  var activeConnection = getActiveConnection();
  var activeConnectionCount = 0;
  var activeConnectionPosition;
  var activeConnectionUnderlineLength;
  if (isConnected(CONNECTION_USB)) {
    drawImage(0, x, 1, USB_STATUS_IMAGE);
    if (activeConnection == CONNECTION_USB) {
      activeConnectionPosition = x;
      activeConnectionUnderlineLength = 9;
    }
    activeConnectionCount = activeConnectionCount + 1;
    x = x + 11;
  }
  if (isConnected(CONNECTION_BLE)) {
    drawImage(0, x+2, 1, BLUETOOTH_STATUS_IMAGE);
    if (activeConnection == CONNECTION_BLE) {
      activeConnectionPosition = x;
      activeConnectionUnderlineLength = 13;
    }

    drawImage(0, x+9, 0, BLE_PROFILE_DOTS + 6*getBleProfile());

    activeConnectionCount = activeConnectionCount + 1;
    x = x + 15;
  }
  if (isConnected(CONNECTION_USB2)) {
    drawImage(0, x, 1, USB_STATUS_IMAGE);
    if (activeConnection == CONNECTION_USB2) {
      activeConnectionPosition = x;
      activeConnectionUnderlineLength = 9;
    }
    activeConnectionCount = activeConnectionCount + 1;
    // x = x + 11;
  }

  if (activeConnectionCount > 1) {
    drawRect(0,
        activeConnectionPosition,
        14,
        activeConnectionPosition+activeConnectionUnderlineLength,
        16);
  }

  if (isMainPowered()) {
    if (isCharging()) {
      drawImage(0, DISPLAY_WIDTH-14, 0, CHARGING_STATUS_IMAGE);
    }
  } else {
    // Map 0-100 -> 0-9.
    // (value * 9 + 50) / 100
    var batteryIndex = (getBatteryPercentage() * 9 + 50) / 100;
    drawImage(0, DISPLAY_WIDTH-14, 0, BATTERY_LEVEL_STATUS_IMAGES + batteryIndex * 26);
  }
}

func redrawDisplayOverlay() {
  // Mark the screen dirty
  drawRect(0, 0, 0, 0, 0);
}

// Global Script: Magic Key Scripts
var magicKey;

func pressMagicKey(buttonIndex) {
  magicKey = SC_NONE;
  if (lastScanCodePressed == SC_MINUS
      || lastScanCodePressed == SC_EQUAL) {
    magicKey = SC_DOT | KEY_SHIFT;
  } else if (lastScanCodePressed == (SC_9 | KEY_SHIFT)
      || lastScanCodePressed == SC_BACKSLASH
      || lastScanCodePressed == (SC_APOSTROPHE | KEY_SHIFT)) {
    magicKey = SC_APOSTROPHE | KEY_SHIFT;
  } else if (SC_1 <= lastScanCodePressed && lastScanCodePressed <= SC_0) {
    magicKey = SC_COMMA;
  } else if (SC_KP_1 <= lastScanCodePressed && lastScanCodePressed <= SC_KP_0) {
    magicKey = SC_COMMA;
  } else if ((lastScanCodePressed | KEY_SHIFT) == (SC_L_BRACKET | KEY_SHIFT)) {
    magicKey = SC_ENTER;
  } else if (lastScanCodePressed == SC_COMMA
      || lastScanCodePressed == SC_DOT
      || lastScanCodePressed == SC_KP_DOT) {
    magicKey = SC_SPACE;
  }

  if (magicKey & KEY_SHIFT) {
    pressScanCodeButton(buttonIndex, 0, SC_L_SHIFT, 1);
  }
  pressScanCodeButton(buttonIndex, (magicKey & KEY_SHIFT) ? MODIFIER_SHIFT : 0, magicKey & (KEY_SHIFT - 1), 0);
}

func releaseMagicKey() {
  releaseScanCodeButton(magicKey & (KEY_SHIFT - 1));
  if (magicKey & KEY_SHIFT) {
    releaseScanCodeButton(SC_L_SHIFT);
  }
}

// Global Script: RGB Scripts
const SPEED_VALUES      = [[ 00 04 08 0c 10 18 20 30 40 ]];
const HUE_SPREAD_VALUES = [[ 00 10 20 28 30 38 40 48 50 ]];
const SATURATION_VALUES = [[ 00 20 40 50 60 68 70 78 80 ]];
const BRIGHTNESS_VALUES = [[ 00 08 10 18 20 28 30 38 40 ]];

func rgbUpdateKeyHueCycle(hShift, sat, spreadMultiplier, value) {
  const HUE_CYCLE_RGB_ORDER = [[
    00
    0c 01
    18 0d 02
    19 0e 03
    1a 0f 04
    1b 10 05
    24 1c 11
    25 1d
    26

    27
    28 1e
    29 1f 12
    20 13 06
    21 14 07
    22 15 08
    23 16 09
    17 0a
    0b
  ]];

  for (var i = 0; i < 42; i = i + 1) {
    setHsv(
        HUE_CYCLE_RGB_ORDER[i],
        spreadMultiplier*i + hShift,
        sat,
        value
    );
  }
}

func rgbUpdateUnderglowHueCycle(hShift, sat, spreadMultiplier, value) {
  const COLOR_OFFSETS = [[
    02 0b 0d  1d 1e 28
    06 0f 14  16 1b 24
  ]];

  for (var i = 0; i < 12; i = i + 1) {
    setHsv(
        i + 42,
        spreadMultiplier * COLOR_OFFSETS[i] + hShift,
        sat,
        value
    );
  }
}

func rgbUpdateHueCycle() {
  var hue = animationTime() * SPEED_VALUES[speed] + hueShift;
  rgbUpdateKeyHueCycle(
      hue,
      SATURATION_VALUES[saturation] * 2,
      HUE_SPREAD_VALUES[hueSpread] * 16,
      BRIGHTNESS_VALUES[brightness]
  );
  rgbUpdateUnderglowHueCycle(
      hue,
      SATURATION_VALUES[saturation] * 2,
      HUE_SPREAD_VALUES[hueSpread] * 16,
      BRIGHTNESS_VALUES[brightness]
  );
}

func rgbUpdateKeyConstantColor(r, g, b) {
  for (var i = 0; i < 42; i = i + 1) {
    setRgb(i, r, g, b);
  }
}

func rgbUpdateAllConstantColor(r, g, b) {
  for (var i = 0; i < 54; i = i + 1) {
    setRgb(i, r, g, b);
  }
}

func rgbUpdateKeyRandomColors(hShift, b, s) {
  var alwaysFullBrightness = !shouldShowKeyAnimations();
  if (alwaysFullBrightness) {
    for (var i = 0; i < 42; i = i + 1) {
      setHsv(i, hShift + keyColorData[i], s, b);
    }
  } else {
    for (var i = 0; i < 42; i = i + 1) {
      var v = keyColorData[i];
      if (v < (32 << 16)) {
        v = v + 0x10000;
        keyColorData[i] = v;
      }
      setHsv(i, hShift + v, s, b * (v >>> 16) >>> 5);
    }
  }
}

func rgbUpdateButtonRandomColor(buttonIndex) {
  keyColorData[buttonIndex] = rand() & 0xffff;

  // If there's no update of keys in the tick loop, update it now.
  if (!isTimerActive(TIMER_ID_RGB_UPDATE)) {
    rgbUpdate();
  }
}

func rgbInitRandomColors() {
  for (var i = 0; i < 42; i = i + 1) {
    keyColorData[i] = (rand() & 0xffff) | 0x200000;
  }
}

// 256 step sine table.
const SINE_TABLE = [[ 80 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7 da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4 f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6 f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3 b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83 80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52 4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28 25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b 0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00 00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09 0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23 25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c 4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c ]];

func rgbUpdateKeyBreatheCycle() {
  // Sine wave between 4-20 brightness, with staggering of r, g, b values
  // to reduce harsh steps.
  var w = (0xc00 + (SINE_TABLE[(animationTime() >> 5) & 0xff] - 0x80) * (2 * 8));
  rgbUpdateAllConstantColor((w + 0x53) >> 8, w >> 8, (w + 0xa6) >> 8);
}

const DISCONNECTED_KEY_ORDER = [[ 00 01 02 03 04 05 04 03 02 01 ]];
func rgbUpdateKeyConnectingCycle() {
  for (var i = 0; i < 42; i = i + 1) {
    setRgb(i, 0, 0, 0);
  }

  var index = getTime() >> 6;
  var keyId = DISCONNECTED_KEY_ORDER[index % 10];
  setHsv(keyId, index << 10, 0xf0, 16);
}

func shouldShowKeyAnimations() var {
  var activePairConnection = getActivePairConnection();
  if (activePairConnection == PAIR_CONNECTION_NONE) {
    // To avoid flicker at startup while connecting to BLE
    // do not show button animations when disconnected.
    return 0;
  }

  if (activePairConnection == PAIR_CONNECTION_BLE) {
    // To avoid power drain over BLE, only show animations if
    // both sides are powered.
    return isMainPowered() && isPairPowered();
  }

  return isMainPowered() || isPairPowered();
}

func animationTime() var {
  return shouldShowKeyAnimations() ? getTime() : 0;
}

func rgbUpdateRandomColors() {
  rgbUpdateKeyRandomColors(
      animationTime() * SPEED_VALUES[speed] + hueShift,
      BRIGHTNESS_VALUES[brightness],
      SATURATION_VALUES[saturation] * 2,
  );
}

func rgbUpdate() {
  if (isBleAdvertising()) {
    rgbUpdateKeyConnectingCycle();
  } else if (isHostSleeping()) {
    rgbUpdateKeyBreatheCycle();
  } else {
    @rgbUpdateHueCycle();
  }
}

func setKeyRgb(r, g, b) {
  r = r * brightness >> 3;
  g = g * brightness >> 3;
  b = b * brightness >> 3;
  for(var i = 0; i < 42; i = i + 1) {
    setRgb(i, r, g, b);
  }
}

func setUnderglowRgb(r, g, b) {
  r = r * brightness >> 3;
  g = g * brightness >> 3;
  b = b * brightness >> 3;
  for(var i = 42; i < 54; i = i + 1) {
    setRgb(i, r, g, b);
  }
}

func rgbUpdateUnderglow() {
  if (isBleAdvertising()) {
    setUnderglowRgb(0, 0, 0);
  } else if (isHostSleeping()) {
    setUnderglowRgb(8, 8, 8);
  } else {
    @rgbUpdateUnderglowWhite();
  }
}

func rgbUpdateUnderglowWhite() {
  setUnderglowRgb(64, 64, 64);
}

func rgbButtonPressRandomColor() {
  keyColorData[lastButtonIndex] = rand() & 0xffff;

  // If there's no update of keys in the tick loop, update it now.
  if (!isTimerActive(TIMER_ID_RGB_UPDATE) && (isMainPowered() || isPairPowered())) {
    rgbUpdate();
  }
}

func rgbUpdateRed() {
  setKeyRgb(128, 0, 0);
}

func rgbUpdateUnderglowRed() {
  setUnderglowRgb(128, 0, 0);
}

func rgbUpdateGreen() {
  setKeyRgb(0, 128, 0);
}

func rgbUpdateUnderglowGreen() {
  setUnderglowRgb(0, 128, 0);
}

func rgbUpdateBlue() {
  setKeyRgb(0, 0, 128);
}

func rgbUpdateUnderglowBlue() {
  setUnderglowRgb(0, 0, 128);
}

func rgbUpdateUnderglowOff() {
  setUnderglowRgb(0, 0, 0);
}

// Global Script: Screen Saver Scripts
const SCREEN_SAVER_TIMEOUT = 900000; // 15 minutes.

func shouldUseScreenSaver() var {
  if (getActivePairConnection() == PAIR_CONNECTION_BLE) {
    return isPairPowered() && isMainPowered();
  } else {
    // No pair, or cable pair.
    return isPairPowered() || isMainPowered();
  }
}

var isShowingScreenSaver = 0;
var screenSaverStartTime;
var screenSaverPosition[8];
var screenSaverVelocity[8];
func startScreenSaver() {
  if (!shouldUseScreenSaver()) return;

  setAutoDraw(0, AUTO_DRAW_NONE);
  setAutoDraw(1, AUTO_DRAW_NONE);

  isShowingScreenSaver = 1;
  screenSaverStartTime = getTime();
  for (var i = 0; i < 8; i = i + 1) {
    screenSaverPosition[i] = rand();

    var velocity = (rand() & 0x1ff) - 256;
    velocity = velocity + (velocity < 0 ? -32 : 32);
    screenSaverVelocity[i] = velocity;
  }
  drawScreenSaver();
  startTimer(TIMER_ID_SCREEN_SAVER, 50, 1, @drawScreenSaver);
}

func wrap(x, max) var {
  x = x % (2 * max);
  if (x < 0) x = -x;
  return x < max ? x : 2 * max - x;
}

func drawScreenSaver() {
  const OVERLAY_HEIGHT = 16;

  var timeElapsed = getTime() - screenSaverStartTime;

  for (var display = 0; display < 2; display = display + 1) {
    var index = 4 * display;
    clearDisplay(display);

    for (var i = 0; i < 5; i = i + 1) {
      var effectiveTime = timeElapsed + i * 100;
      drawLine(
          display,
          wrap(screenSaverPosition[index    ] + (effectiveTime * screenSaverVelocity[index    ] >> 13), DISPLAY_WIDTH),
          wrap(screenSaverPosition[index + 1] + (effectiveTime * screenSaverVelocity[index + 1] >> 13), DISPLAY_HEIGHT - OVERLAY_HEIGHT) + OVERLAY_HEIGHT,
          wrap(screenSaverPosition[index + 2] + (effectiveTime * screenSaverVelocity[index + 2] >> 13), DISPLAY_WIDTH),
          wrap(screenSaverPosition[index + 3] + (effectiveTime * screenSaverVelocity[index + 3] >> 13), DISPLAY_HEIGHT - OVERLAY_HEIGHT) + OVERLAY_HEIGHT,
      );
    }
  }
}

func updateScreenSaverTimer() {
  if (isShowingScreenSaver) {
    isShowingScreenSaver = 0;
    updateDisplay();
  }
  startTimer(TIMER_ID_SCREEN_SAVER, SCREEN_SAVER_TIMEOUT, 1, @startScreenSaver);
}

// Global Script: onConnectionUpdate
func onConnectionUpdate() {
  if (isBleSummaryActive) {
  }
  redrawDisplayOverlay();
  updateBoardPower();
}

// Global Script: updateBoardPower
func updateBoardPower() {
  const PAIR_BOARD_POWER_NO_OVERRIDE = 0;
  const PAIR_BOARD_POWER_FORCE_OFF = 1;
  const PAIR_BOARD_POWER_FORCE_ON = 2;

  const RGB_UPDATE_TIME = 10;
  const BLE_UPDATE_TIME = 50;

  if (00) {
    setPairBoardPower(PAIR_BOARD_POWER_FORCE_ON);
    startTimer(TIMER_ID_RGB_UPDATE, 32, 1, @rgbUpdate);
    setBoardPower(1);
  } else {
    setPairBoardPower(PAIR_BOARD_POWER_NO_OVERRIDE);
    if (isBleAdvertising()) {
      startTimer(TIMER_ID_RGB_UPDATE, 32, 1, @rgbUpdate);
      setBoardPower(1);
    } else if (brightness == 0) {
      stopTimer(TIMER_ID_RGB_UPDATE);
      setBoardPower(getActivePairConnection() == PAIR_CONNECTION_CABLE);
    } else if (getActivePairConnection() == PAIR_CONNECTION_BLE) {
      if (isPairPowered() && isMainPowered()) {
        startTimer(TIMER_ID_RGB_UPDATE, BLE_UPDATE_TIME, 1, @rgbUpdate);
      } else {
        stopTimer(TIMER_ID_RGB_UPDATE);
      }
      setBoardPower(isMainPowered());
    } else {
      // No pair, or cable pair.
      if (isPairPowered() || isMainPowered()) {
        startTimer(TIMER_ID_RGB_UPDATE, RGB_UPDATE_TIME, 1, @rgbUpdate);
        setBoardPower(1);
      } else {
        stopTimer(TIMER_ID_RGB_UPDATE);
        setBoardPower(0);
      }
    }
  }
  rgbUpdate();
  rgbUpdateUnderglow();
}

func init() {
  // Global
  rgbInitRandomColors();

  setScript(SCRIPT_ID_DISPLAY_OVERLAY, @drawDisplayOverlay);
  setScript(SCRIPT_ID_BATTERY_UPDATE, @{
    redrawDisplayOverlay();
    updateBoardPower();
  });
  setScript(SCRIPT_ID_CONNECTION_UPDATE, @onConnectionUpdate);
  setScript(SCRIPT_ID_PAIR_CONNECTION_UPDATE, @onConnectionUpdate);
  setScript(SCRIPT_ID_KEYBOARD_LED_STATUS_UPDATE, @{
    rgbUpdate();
    if (isBleSummaryActive) {
    } else {
      updateDisplay();
    }
  });
  setScript(SCRIPT_ID_STENO_MODE_UPDATE, @{
    if (isBleSummaryActive) {
    } else {
      updateDisplay();
    }
  });
  setScript(SCRIPT_ID_BLE_ADVERTISING_UPDATE, @onConnectionUpdate);
  if (HAS_AUDIO) {
    setScript(SCRIPT_ID_BLE_PAIR_COMPLETE, @{
      // C-7 G-7 C-8 G-7 C-8 each for 100ms.
      playSequence([[56 05 5d 05 62 05 5d 05 62 05 00]]);
    });
  }

  updateBoardPower();
  updateScreenSaverTimer();

  activate0();
  activateGlobal();
}

func onPress0() {
  globalPress(0);

  onPress0_0();
}
func onRelease0() {
  globalRelease();
}

func onPress0_0() {
  if (getParameter("host_layout") != "us_linux_ibus") {
    console("set_host_layout us_linux_ibus");
    console("disable_dictionary 95-lapwing-commands-osx.json");
  } else {
    console("enable_dictionary 95-lapwing-commands-osx.json");
    console("set_host_layout us_macos");
  }
}
func onRelease0_0() {
}

func onPress1() {
  globalPress(1);

  onPress1_0();
}
func onRelease1() {
  globalRelease();

  onRelease1_0();
}

func onPress1_0() {
  pressStenoKeyButton(26 /* "#1" */);
}
func onRelease1_0() {
  releaseStenoKey(26 /* "#1" */);
}

func onPress2() {
  globalPress(2);

  onPress2_0();
}
func onRelease2() {
  globalRelease();

  onRelease2_0();
}

func onPress2_0() {
  pressStenoKeyButton(2 /* "T-" */);
}
func onRelease2_0() {
  releaseStenoKey(2 /* "T-" */);
}

func onPress3() {
  globalPress(3);

  onPress3_0();
}
func onRelease3() {
  globalRelease();

  onRelease3_0();
}

func onPress3_0() {
  pressStenoKeyButton(4 /* "P-" */);
}
func onRelease3_0() {
  releaseStenoKey(4 /* "P-" */);
}

func onPress4() {
  globalPress(4);

  onPress4_0();
}
func onRelease4() {
  globalRelease();

  onRelease4_0();
}

func onPress4_0() {
  pressStenoKeyButton(6 /* "H-" */);
}
func onRelease4_0() {
  releaseStenoKey(6 /* "H-" */);
}

func onPress5() {
  globalPress(5);

  onPress5_0();
}
func onRelease5() {
  globalRelease();
}

func onPress5_0() {
  console("process_strokes SP-S");
}
func onRelease5_0() {
}

func onPress6() {
  globalPress(6);

  onPress6_0();
}
func onRelease6() {
  globalRelease();

  onRelease6_0();
}

func onPress6_0() {
  pressStenoKeyButton(12 /* "*3" */);
}
func onRelease6_0() {
  releaseStenoKey(12 /* "*3" */);
}

func onPress7() {
  globalPress(7);

  onPress7_0();
}
func onRelease7() {
  globalRelease();

  onRelease7_0();
}

func onPress7_0() {
  pressStenoKeyButton(16 /* "-F" */);
}
func onRelease7_0() {
  releaseStenoKey(16 /* "-F" */);
}

func onPress8() {
  globalPress(8);

  onPress8_0();
}
func onRelease8() {
  globalRelease();

  onRelease8_0();
}

func onPress8_0() {
  pressStenoKeyButton(18 /* "-P" */);
}
func onRelease8_0() {
  releaseStenoKey(18 /* "-P" */);
}

func onPress9() {
  globalPress(9);

  onPress9_0();
}
func onRelease9() {
  globalRelease();

  onRelease9_0();
}

func onPress9_0() {
  pressStenoKeyButton(20 /* "-L" */);
}
func onRelease9_0() {
  releaseStenoKey(20 /* "-L" */);
}

func onPress10() {
  globalPress(10);

  onPress10_0();
}
func onRelease10() {
  globalRelease();

  onRelease10_0();
}

func onPress10_0() {
  pressStenoKeyButton(22 /* "-T" */);
}
func onRelease10_0() {
  releaseStenoKey(22 /* "-T" */);
}

func onPress11() {
  globalPress(11);

  onPress11_0();
}
func onRelease11() {
  globalRelease();

  onRelease11_0();
}

func onPress11_0() {
  pressStenoKeyButton(24 /* "-D" */);
}
func onRelease11_0() {
  releaseStenoKey(24 /* "-D" */);
}

func onPress12() {
  globalPress(12);

  onPress12_0();
}
func onRelease12() {
  globalRelease();
}

func onPress12_0() {
  console("process_strokes SP*");
}
func onRelease12_0() {
}

func onPress13() {
  globalPress(13);

  onPress13_0();
}
func onRelease13() {
  globalRelease();

  onRelease13_0();
}

func onPress13_0() {
  pressStenoKeyButton(1 /* "S2" */);
}
func onRelease13_0() {
  releaseStenoKey(1 /* "S2" */);
}

func onPress14() {
  globalPress(14);

  onPress14_0();
}
func onRelease14() {
  globalRelease();

  onRelease14_0();
}

func onPress14_0() {
  pressStenoKeyButton(3 /* "K-" */);
}
func onRelease14_0() {
  releaseStenoKey(3 /* "K-" */);
}

func onPress15() {
  globalPress(15);

  onPress15_0();
}
func onRelease15() {
  globalRelease();

  onRelease15_0();
}

func onPress15_0() {
  pressStenoKeyButton(5 /* "W-" */);
}
func onRelease15_0() {
  releaseStenoKey(5 /* "W-" */);
}

func onPress16() {
  globalPress(16);

  onPress16_0();
}
func onRelease16() {
  globalRelease();

  onRelease16_0();
}

func onPress16_0() {
  pressStenoKeyButton(7 /* "R-" */);
}
func onRelease16_0() {
  releaseStenoKey(7 /* "R-" */);
}

func onPress17() {
  globalPress(17);

  onPress17_0();
}
func onRelease17() {
  globalRelease();
}

func onPress17_0() {
  console("process_strokes SP-S");
}
func onRelease17_0() {
}

func onPress18() {
  globalPress(18);

  onPress18_0();
}
func onRelease18() {
  globalRelease();

  onRelease18_0();
}

func onPress18_0() {
  pressStenoKeyButton(13 /* "*4" */);
}
func onRelease18_0() {
  releaseStenoKey(13 /* "*4" */);
}

func onPress19() {
  globalPress(19);

  onPress19_0();
}
func onRelease19() {
  globalRelease();

  onRelease19_0();
}

func onPress19_0() {
  pressStenoKeyButton(17 /* "-R" */);
}
func onRelease19_0() {
  releaseStenoKey(17 /* "-R" */);
}

func onPress20() {
  globalPress(20);

  onPress20_0();
}
func onRelease20() {
  globalRelease();

  onRelease20_0();
}

func onPress20_0() {
  pressStenoKeyButton(19 /* "-B" */);
}
func onRelease20_0() {
  releaseStenoKey(19 /* "-B" */);
}

func onPress21() {
  globalPress(21);

  onPress21_0();
}
func onRelease21() {
  globalRelease();

  onRelease21_0();
}

func onPress21_0() {
  pressStenoKeyButton(21 /* "-G" */);
}
func onRelease21_0() {
  releaseStenoKey(21 /* "-G" */);
}

func onPress22() {
  globalPress(22);

  onPress22_0();
}
func onRelease22() {
  globalRelease();

  onRelease22_0();
}

func onPress22_0() {
  pressStenoKeyButton(23 /* "-S" */);
}
func onRelease22_0() {
  releaseStenoKey(23 /* "-S" */);
}

func onPress23() {
  globalPress(23);

  onPress23_0();
}
func onRelease23() {
  globalRelease();

  onRelease23_0();
}

func onPress23_0() {
  pressStenoKeyButton(25 /* "-Z" */);
}
func onRelease23_0() {
  releaseStenoKey(25 /* "-Z" */);
}

func onPress24() {
  globalPress(24);

  onPress24_0();
}
func onRelease24() {
  globalRelease();

  onRelease24_0();
}

func onPress24_0() {
  pressScanCodeButton(24, 0, 225 /* "⇧" */, 0);
}
func onRelease24_0() {
  releaseScanCodeButton(225 /* "⇧" */);
}

func onPress25() {
  globalPress(25);

  onPress25_0();
}
func onRelease25() {
  globalRelease();

  onRelease25_0();
}

func onPress25_0() {
  pressScanCodeButton(25, 0, 224 /* "⌃" */, 0);
}
func onRelease25_0() {
  releaseScanCodeButton(224 /* "⌃" */);
}

func onPress26() {
  globalPress(26);

  onPress26_0();
}
func onRelease26() {
  globalRelease();

  onRelease26_0();
}

func onPress26_0() {
  pressScanCodeButton(26, 0, 226 /* "⌥" */, 0);
}
func onRelease26_0() {
  releaseScanCodeButton(226 /* "⌥" */);
}

func onPress27() {
  globalPress(27);

  onPress27_0();
}
func onRelease27() {
  globalRelease();

  onRelease27_0();
}

func onPress27_0() {
  pressScanCodeButton(27, 0, 227 /* "⌘" */, 0);
}
func onRelease27_0() {
  releaseScanCodeButton(227 /* "⌘" */);
}

func onPress28() {
  globalPress(28);

  onPress28_0();
}
func onRelease28() {
  globalRelease();

  onRelease28_0();
}

func onPress28_0() {
  pressMouseButton(0 /* "🖱️L" */);
}
func onRelease28_0() {
  releaseMouseButton(0 /* "🖱️L" */);
}

func onPress29() {
  globalPress(29);

  onPress29_0();
}
func onRelease29() {
  globalRelease();

  onRelease29_0();
}

func onPress29_0() {
  pressMouseButton(1 /* "🖱️R" */);
}
func onRelease29_0() {
  releaseMouseButton(1 /* "🖱️R" */);
}

func onPress30() {
  globalPress(30);

  onPress30_0();
}
func onRelease30() {
  globalRelease();

  onRelease30_0();
}

func onPress30_0() {
  pressMouseButton(2 /* "🖱️M" */);
}
func onRelease30_0() {
  releaseMouseButton(2 /* "🖱️M" */);
}

func onPress31() {
  globalPress(31);

  onPress31_0();
}
func onRelease31() {
  globalRelease();

  onRelease31_0();
}

func onPress31_0() {
  pressScanCodeButton(31, 0, 80 /* "←" */, 0);
}
func onRelease31_0() {
  releaseScanCodeButton(80 /* "←" */);
}

func onPress32() {
  globalPress(32);

  onPress32_0();
}
func onRelease32() {
  globalRelease();

  onRelease32_0();
}

func onPress32_0() {
  pressScanCodeButton(32, 0, 81 /* "↓" */, 0);
}
func onRelease32_0() {
  releaseScanCodeButton(81 /* "↓" */);
}

func onPress33() {
  globalPress(33);

  onPress33_0();
}
func onRelease33() {
  globalRelease();

  onRelease33_0();
}

func onPress33_0() {
  pressScanCodeButton(33, 0, 82 /* "↑" */, 0);
}
func onRelease33_0() {
  releaseScanCodeButton(82 /* "↑" */);
}

func onPress34() {
  globalPress(34);

  onPress34_0();
}
func onRelease34() {
  globalRelease();

  onRelease34_0();
}

func onPress34_0() {
  pressScanCodeButton(34, 0, 79 /* "→" */, 0);
}
func onRelease34_0() {
  releaseScanCodeButton(79 /* "→" */);
}

func onPress35() {
  globalPress(35);

  onPress35_0();
}
func onRelease35() {
  globalRelease();

  onRelease35_0();
}

func onPress35_0() {
  pressScanCodeButton(35, 0, 41 /* "⎋" */, 0);
}
func onRelease35_0() {
  releaseScanCodeButton(41 /* "⎋" */);
}

func onPress36() {
  globalPress(36);

  onPress36_0();
}
func onRelease36() {
  globalRelease();
}

func onPress36_0() {
  console("process_strokes KPA");
}
func onRelease36_0() {
}

func onPress37() {
  globalPress(37);

  onPress37_0();
}
func onRelease37() {
  globalRelease();

  onRelease37_0();
}

func onPress37_0() {
  pressStenoKeyButton(8 /* "A" */);
}
func onRelease37_0() {
  releaseStenoKey(8 /* "A" */);
}

func onPress38() {
  globalPress(38);

  onPress38_0();
}
func onRelease38() {
  globalRelease();

  onRelease38_0();
}

func onPress38_0() {
  pressStenoKeyButton(9 /* "O" */);
}
func onRelease38_0() {
  releaseStenoKey(9 /* "O" */);
}

func onPress39() {
  globalPress(39);

  onPress39_0();
}
func onRelease39() {
  globalRelease();

  onRelease39_0();
}

func onPress39_0() {
  pressStenoKeyButton(14 /* "E" */);
}
func onRelease39_0() {
  releaseStenoKey(14 /* "E" */);
}

func onPress40() {
  globalPress(40);

  onPress40_0();
}
func onRelease40() {
  globalRelease();

  onRelease40_0();
}

func onPress40_0() {
  pressStenoKeyButton(15 /* "U" */);
}
func onRelease40_0() {
  releaseStenoKey(15 /* "U" */);
}

func onPress41() {
  globalPress(41);

  onPress41_0();
}
func onRelease41() {
  globalRelease();
}

func onPress41_0() {
  console("process_strokes KPA*");
}
func onRelease41_0() {
}
